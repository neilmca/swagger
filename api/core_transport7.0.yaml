swagger: "2.0"
info:
  version: "1.0"
  title: Transport API 1.0
  description: |
  
    Endpoints exposed from the Core Serve - Transport path.
    
    Transport root Url https://mtv.musicqubed.com/transport/service/

    All endpoints have mandatory X-User-Agent HTTP Header.   
    
    ### API Security
    
    Where a HTTP Authorization header is specified then the token to be appended is the rememberMe token that is received from ACC_CHECK. E.g.
    
    Authorization: Bearer 9IJF9SEFSNEF9S8EHRF9WF
    
host: mtv.musicqubed.com
basePath: /transport/service/
schemes:
- https
consumes:
- application/json
produces:
- application/json
tags:
  - name: Installations
    description: |
      Defines set of endpoints required by application to complete installation and user identification flow.
  - name: Multiple Installations
    description: |
      Defines endpoints to be used by applications to perform as primary within list on known installations.
  - name: Follows
    description: |
      Defines endpoints to be used by applications to manage a user's followed playlists. Provides capabilities to
  - name: Admin
    description: |
      Defines endpoints to be used for admin or system purposes.
    

paths:
  /{community}/7.0/installations:
    post:
      summary: Create new installation
      description: |
        After new application installed/re-installed to a device, to complete installation proccess and register the installation with the server this request must be successful. It takes a JSON object containing a unique installationID (of the 128-bit UUID value) generated by application, unique deviceID and, optionally, push token of the specified push provider.Response provides details of success or failure (and reason).
      
      tags:
      - Installations
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
        description: Community name in the form of string
      - name: secureToken
        in: query
        required: true
        type: string
        description: Wiki page display/GINF/General defines how to generate one. Payload is installationID.
      - name: timestamp
        in: query
        required: true
        type: integer
        format: int64
        description: Wiki page describes why we need this.
      - name: body
        in: body
        required: true
        schema:
          type: object
          required:
          - installationID
          - deviceID
          properties:
            installationID:
              type: string
            deviceID:
              type: string
            push:
              type: object
              description: Defines provider (as URBAN_AIRSHIP) & token to be used to push notifications back to the device.
              required:
              - providerType
              - token
              properties:
                providerType:
                  type: string
                  description: push provider name
                token: 
                  type: string
                  description: push provider token
          example:
            installationID: de305d54-75b4-431b-adb2-eb6b9e546014
            deviceID: client_format
            push:
              providerType: URBAN_AIRSHIP
              token: asdlkjlkj
          
      responses:
        201:
          description: (Created) is sent back in case of successully created resource with URI to the resource in Location Header to be used going forward.
          schema:
            type: object
            properties:
              installationID:
                description: installation UUID
                type: string
              installationToken:
                description: installation token
                type: string
            required:
            - installationID
            - installationToken
          examples:
            application/json:
              installationID: de305d54-75b4-431b-adb2-eb6b9e546014
              installationToken: value generated by server to be used in secureToken as payload
                going forward
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements.
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations.
        404:
          description: (Not Found) is sent back in case there is either no requested community, apiVersion
        409:
          description: (Conflict) is sent back in case request from the client tries is the attempt to create duplicate installation resource (of the same installationID)
  /{community}/7.0/installations/{installationID}/{identityProvider}/:
    put:
      summary: Update installation
      description: |
       Update installation's identity provider details.
       
       When user is ready to identity themselves.
      tags:
      - Installations
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
        description: Community name in the form of string.
      - name: installationID
        in: path
        required: true
        type: string
        description: installationID to update installation's user identity provider.
      - name: identityProvider
        in: path
        required: true
        type: string
        description: Supported provider. (e.g. FACEBOOK, GOOGLE, etc.)
      - name: secureToken
        in: query
        required: true
        type: string
        description: Wiki page display/GINF/General defines how to generate one. Payload is installationToken.
      - name: timestamp
        in: query
        required: true
        type: integer
        format: int64
        description: Wiki page describes why we need this.
      - name: body
        in: body
        required: true
        schema:
          type: object
          required:
          - userIdentity
          example:
            userIdentity:
              id: facebook id
              accessToken: BhpTSDshRH42YlkKvHpJGBL7Eal8f_m5e6wslNGehmM_PFhOh45KQmuw4iRkUSbIHHpex87zJzxlcX0UuyVW4fvfU85tvQCn1legvAD80aiP7-a_aswiMQqU9_SrjU2nZJb8oQAtF4SYH2JYB-Pn1-yDPDboNWzDx5n8iOMEGYLSw
              email: someone@facebook.com
            push:
              providerType: URBAN_AIRSHIP
              token: asdlkjlkj
          properties:
            userIdentity:
              type: object
              description: Defines id & accessToken to be used to get identity profile via specified identityProvider.
              required:
              - id
              - accessToken
              properties:
                id:
                  type: string
                  description: social network identity
                accessToken:
                  type: string
                  description: social network token
                email:
                  type: string
                  description: email address associated to the social network identity
            push:
              type: object
              description: Defines provider (as URBAN_AIRSHIP) & token to be used to push notifications back to the device.
              required:
              - providerType
              - token
              properties:
                providerType:
                  type: string
                  description: push provider name
                token: 
                  type: string
                  description: push provider token
         
      responses:
        200:
          description: (Ok) is sent back in case installation resource was successully updated with identityProvider details sent (a.k. legacy user.firstActivation=false). Existing user userID is sent back as JSON.
          schema:
            type: object
            properties:
              userId:
                description: userId
                type: string
            required:
            - userId
          examples:
            application/json:
              userId: 94319568252f4516e5b93698fd4e035e
        201:
          description: (Created) is sent back in case request created new resource (user) with identityProvider details sent (a.k. user.firstActivation=true). New user userID is sent back as JSON.
          schema:
            type: object
            properties:
              userId:
                description: userId
                type: string
            required:
            - userId
          examples:
            application/json:
              userId: 94319568252f4516e5b93698fd4e035e
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements.
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations
        403:
          description: (Forbidden) is sent back in case client sends request to update installation with identity provider but installation already has these details
        404:
          description: (Not Found) is sent back in case there is either no requested community, apiVersion, installation or identityProvider
          
  /transport/service/{community}/7.0/installations/{installationID}/primary:
    get:
      summary: query if device is primary
      description: Confirms if the installation is primary.
      tags:
      - Multiple Installations
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
        description: Community name in the form of string.
      - name: installationID
        in: path
        required: true
        type: string
        description: installationID to update installation's user identity provider.
      - name: secureToken
        in: query
        required: true
        type: string
        description: Wiki page defines how to generate one. Payload is installationToken.
      - name: timestamp
        in: query
        required: true
        type: integer
        format: int64
        description: Wiki page describes why we need this.
      responses:
        200:
          description: (Ok) responses from this endpoint may contain HTTP Header 'Retry-After' with the value in seconds to retry request. Polling is not required if header is not present.
          headers:
            Retry-After:
              description: value in seconds to retry request
              type: integer
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements.
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations.
        403:
          description: (Forbidden) is sent back in case client is in state not appropriate for the request.
        404:
          description: (Not Found) is sent back in case there are either no requested community, apiVersion, installation.
        409:
          description: (Conflict) server sends this error in case polling installation is not primary anymore for client to resolve what to do next.
    put:
      summary: Set device as primary
      description: Set installation as primary.
      tags:
      - Multiple Installations
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
        description: Community name in the form of string.
      - name: installationID
        in: path
        required: true
        type: string
        description: installationID to update installation's user identity provider.
      - name: secureToken
        in: query
        required: true
        type: string
        description: Wiki page defines how to generate one. Payload is installationToken.
      - name: timestamp
        in: query
        required: true
        type: integer
        format: int64
        description: Wiki page describes why we need this.
      responses:
        200:
          description: (Ok) responses from this endpoint may contain HTTP Header 'Retry-After' with the value in seconds to retry request. Polling is not required if header is not present.
          headers:
            Retry-After:
              description: value in seconds to retry request
              type: integer
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements.
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations.
        403:
          description: (Forbidden) is sent back in case client is in state not appropriate for the request.
        404:
          description: (Not Found) is sent back in case there are either no requested community, apiVersion, installation.
  /transport/service/{community}/7.0/me/follows:
    get:
      summary: Query user follows
      description: >-
        Get all followed playlist feeds.
      tags:
      - Follows
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
      responses:
        200:
          description: (Ok) is sent back with JSON containing playlist feeds ids and user's followedPlaylistFeedCounters
          schema:
            $ref: '#/definitions/FollowsResponse'
          examples:
            application/json:
              followedPlaylistFeedCounters:
                maxSlots: 5
                maxFollowsActions: 8
                nextFollowActionDate: 2014-11-28Thh:mm:ss.sTZD
                followActionsUsed: 1
              followedPlaylistFeeds:
              - 1213234234
              - 456767895689
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations
        403:
          description:   (Forbidden) is sent back in case client is in state not appropriate for the request  
          
  /transport/service/{community}/7.0/me/follows/{playlistFeedId}:
    put:
      summary: Follow a playlist feed
      description: |
        Follow a playlist feed
      tags:
      - Follows
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
      - name: playlistFeedId
        in: path
        required: true
        type: string
      responses:
        200:
          description: (Ok) is sent back in case of successful follow action with JSON containing playlist feeds ids and user's followedPlaylistFeedCounters
          schema:
            $ref: '#/definitions/FollowsResponse'
          examples:
            application/json:
              followedPlaylistFeedCounters:
                maxSlots: 5
                maxFollowsActions: 8
                nextFollowActionDate: 2014-11-28Thh:mm:ss.sTZD
                followActionsUsed: 1
              followedPlaylistFeeds:
              - 1213234234
              - 456767895689
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations
        403:
          description: (Forbidden) is sent back in case client is in state not appropriate for the request
        409:
          description: (Conflict) is sent back in case user has exceeded all allowed playlist slots or follow actions. The error type is contained in JSON
          schema:
            type: object
            properties:
              message:
                type: string
                enum:
                - MAX_SLOTS_EXCEEDED
                - MAX_FOLLOW_ACTIONS_EXCEEDED
          examples:
            application/json:
              message: MAX_SLOTS_EXCEEDED
    delete:
      summary: Unfollow a playlst feed
      description: |
        Unfollow a playlst feed
      tags:
      - Follows
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
      - name: playlistFeedId
        in: path
        required: true
        type: string
      responses:
        200:
          description: (Ok) is sent back in case of successful unfollow action with JSON containing playlist feeds ids and user's followedPlaylistFeedCounters
          schema:
            $ref: '#/definitions/FollowsResponse'
          examples:
            application/json:
              followedPlaylistFeedCounters:
                maxSlots: 5
                maxFollowsActions: 8
                nextFollowActionDate: 2014-11-28Thh:mm:ss.sTZD
                followActionsUsed: 1
              followedPlaylistFeeds:
              - 1213234234
              - 456767895689
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations
  
  /transport/service/admin/{community}/7.0/users/{uid}/token:
    post:
      summary: Get new authorization token
      description: Allows a trusted system identified as an issuer to get an authentication token and make calls to Core Server APIs on behalf of a given user.
      tags:
      - Admin
      operationId: Create_Refresh authentication token_
      produces:
      - application/json
      parameters:
      - name: community
        in: path
        required: true
        type: string
      - name: uid
        in: path
        required: true
        type: string
        description: User unique id
      - name: secureToken
        in: query
        required: true
        type: string
        description: Wiki page display/GINF/General defines how to generate one.
      - name: timestamp
        in: query
        required: true
        type: integer
        format: int64
        description: '... Wiki page describes why we need this.'
      - name: issuer
        in: query
        required: true
        type: string
        description: Unique id assigned to the system issuing the secureToken
      responses:
        200:
          description: provision new token
          schema:
            description: Refresh authentication token response
            type: object
            properties:
              access_token:
                description: access token value
                type: string
              token_type:
                description: authorization type returned value can be used
                type: string
                enum:
                - Bearer
              expires_in:
                description: number of seconds for token to expire
                type: number
                format: double
            required:
            - access_token
            - token_type
            - expires_in
          examples:
            application/json:
              access_token: 9IJF9SEFSNEF9S8EHRF9WXX
              token_type: Bearer
              expires_in: 3600
        400:
          description: (Bad Request) is sent back in case of any issues while resolving parameters, headers or body elements
        401:
          description: (Unauthorized) is sent back in case request failed to pass security context validations
     

definitions:
  FollowsResponse:
    description: Get list of followed playlists response
    type: object
    required:
    - followedPlaylistFeedCounters
    - maxSlots
    - maxFollowsActions
    - followActionsUsed
    - followedPlaylistFeeds
    properties:
      followedPlaylistFeedCounters:
        description: information relating to the number of playlist feed follows the user has
        type: object
      maxSlots:
        description: number of playlist feeds slots that a user can follow at the same time
        type: number
        format: int
      maxFollowsActions:
        description: maximum number of playlist feeds follow actions allowed
        type: number
        format: int
      nextFollowActionDate:
        description: date and time when user will be able to do another follow action if the number of allowed follow actions has been exceeded
        type: string
      followActionsUsed:
        description: number of used follow actions
        type: number
        format: int
      followedPlaylistFeeds:
        description: list of followed playlist feeds. Can be empty if user has no followed playlist feeds
        type: object
  
  
          